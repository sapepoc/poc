//created on: Mar 20, 2017
package com.rules.counter

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import org.sapient.trade.WashTrade;
import org.sapient.trade.model.Trade;
import org.sapient.trade.model.TradeType;
import org.sapient.trade.TradeIdentifier;
import org.sapient.trade.TradeHolder;
import org.sapient.alarm.core.AlarmEventListener
import org.sapient.trade.alarm.WashTradeEvent

global AlarmEventListener alarmEventListener;
rule "Raised a alarm when a wash tarde found"
when
 $washTrades : ArrayList(size>0) from accumulate(
         $trade : Trade($tradeType : tradeType, $quantity : quantity),
         init( 
         	List<WashTrade> washTrades = new ArrayList<WashTrade>();
         	TradeHolder tradeHolder = new TradeHolder();
         	),
         action( 
        		Set<Trade> trades = tradeHolder.getOppositeTrade($tradeType);
        		if(trades == null || trades.isEmpty())
        		{
        			tradeHolder.addTrade($trade);
        		}
        		else
        		{
        			Trade removedTrade =null;
        			for(Trade trade : trades)
        			{
        				if(trade.getQuantity() == $quantity)
        				{
        					WashTrade washTrade = new WashTrade();
        					washTrade.addTrade(trade);
        					washTrade.addTrade($trade);
        					washTrades.add(washTrade);
        					removedTrade=trade;
        					break;
        				}
        			}
        			trades.remove(removedTrade);
        		}
            ),
             reverse( 	System.out.println("I am doing reverse");  ),
         result( washTrades) )
then
 	alarmEventListener.addEvent(new WashTradeEvent($washTrades));
end
